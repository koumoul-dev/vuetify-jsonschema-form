import{_ as n}from"./CcuRCpzk.js";import{u as l}from"./z9aFarv0.js";import{F as s,A as o,G as r,t as c,x as t,y as u,z as m,B as e}from"./DBzMYewB.js";import{V as p}from"./Dvp-ClNT.js";import"./Cw_5nuFU.js";/* empty css        */import"./CZZUuXO1.js";const h=t("p",null,[e(" The old documentation for v2 is still available "),t("a",{href:"https://koumoul-dev.github.io/vuetify-jsonschema-form/2.x/"},"here"),e(". ")],-1),d=t("p",null," VJSF v3 is a complete rewrite. The motivation was to : ",-1),f=t("p",null,[t("ul",null,[t("li",null,"migrate to vue 3 and vuetify 3"),t("li",null,"rethink the annotations vocabulary and the options for more power and clarity"),t("li",null,"losen the coupling between schema structure and presentation while preserving simplicity"),t("li",null,"implement a saner reactivity model and hopefully see gains in performance and stability"),t("li",null,"fully validate the data (using Ajv) and offer a stronger guarantee that a valid form means a valid output data"),t("li",null,[e("extract all the core logic into a separate project ("),t("a",{href:"https://github.com/json-layout/json-layout"},"JSON Layout"),e(") to pave the way for implementations in other UI frameworks")]),t("li",null,"provide a compilation solution that allows the users to move as much pre-processing as possible (and the associated dependencies) to build time")])],-1),v=t("p",null," Being an entirely new major version of VJSF with a new vocabulary of annotations, breaking changes are inevitable. But a compatibility function is provided to help facilitate the migration. ",-1),_=t("pre",null,`import { v2compat } from '@koumoul/vjsf/compat/v2'
const v3Schema = v2compat(schema)`,-1),a="v2 to v3",F={__name:"2to3",setup(y){return l({title:"VJSF - "+a}),(g,b)=>{const i=n;return c(),s(r(p),{class:"doc-content-page"},{default:o(()=>[t("h1",{class:"text-h2 mb-8"},u(a)),h,d,f,v,m(i,null,{default:o(()=>[_]),_:1})]),_:1})}}};export{F as default};
